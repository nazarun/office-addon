{"version":3,"file":"functions.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA,8CAA8C;;;;;WCA9C;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;ACNA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,GAAGA,CAACC,KAAa,EAAEC,MAAc,EAAU;EACzD,OAAOD,KAAK,GAAGC,MAAM;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASC,KAAKA,CAACC,UAAuD,EAAQ;EACnF,IAAMC,KAAK,GAAGC,WAAW,CAAC,YAAM;IAC9B,IAAMC,IAAI,GAAGC,WAAW,CAAC,CAAC;IAC1BJ,UAAU,CAACK,SAAS,CAACF,IAAI,CAAC;EAC5B,CAAC,EAAE,IAAI,CAAC;EAERH,UAAU,CAACM,UAAU,GAAG,YAAM;IAC5BC,aAAa,CAACN,KAAK,CAAC;EACtB,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACO,SAASG,WAAWA,CAAA,EAAW;EACpC,OAAO,IAAII,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,SAASA,CACvBC,WAAmB,EACnBX,UAAuD,EACjD;EACN,IAAIY,MAAM,GAAG,CAAC;EACd,IAAMX,KAAK,GAAGC,WAAW,CAAC,YAAM;IAC9BU,MAAM,IAAID,WAAW;IACrBX,UAAU,CAACK,SAAS,CAACO,MAAM,CAAC;EAC9B,CAAC,EAAE,IAAI,CAAC;EAERZ,UAAU,CAACM,UAAU,GAAG,YAAM;IAC5BC,aAAa,CAACN,KAAK,CAAC;EACtB,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASY,UAAUA,CAACC,OAAe,EAAU;EAClDC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;EAEpB,OAAOA,OAAO;AAChB;AAGO,SAASG,YAAYA,CAACC,CAAS,EAAY;EAChD,IAAIA,CAAC,GAAG,CAAC,IAAI,CAACC,MAAM,CAACC,QAAQ,CAACF,CAAC,CAAC,IAAI,CAACC,MAAM,CAACE,SAAS,CAACH,CAAC,CAAC,EAAE;IACxD,MAAM,IAAII,KAAK,CAAC,uCAAuC,CAAC;EAC1D;EACA,IAAMV,MAAgB,GAAG,EAAE;EAC3B,IAAIW,IAAI,GAAG,CAAC;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIN,CAAC,EAAEM,CAAC,EAAE,EAAE;IAC3B,IAAIA,CAAC,GAAG,CAAC,EAAED,IAAI,IAAIC,CAAC;IACpBZ,MAAM,CAACa,IAAI,CAACF,IAAI,CAAC;EACnB;EACA,OAAOX,MAAM;AACf;AAEAc,eAAe,CAACC,SAAS,CAAC,KAAK,EAAE/B,GAAG,CAAC;AACrC8B,eAAe,CAACC,SAAS,CAAC,OAAO,EAAE5B,KAAK,CAAC;AACzC2B,eAAe,CAACC,SAAS,CAAC,WAAW,EAAEjB,SAAS,CAAC;AACjDgB,eAAe,CAACC,SAAS,CAAC,KAAK,EAAEd,UAAU,CAAC,C","sources":["webpack://excel-custom-functions/webpack/bootstrap","webpack://excel-custom-functions/webpack/runtime/define property getters","webpack://excel-custom-functions/webpack/runtime/hasOwnProperty shorthand","webpack://excel-custom-functions/webpack/runtime/make namespace object","webpack://excel-custom-functions/./src/functions/functions.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* global clearInterval, console, CustomFunctions, setInterval */\n\n/**\n * Adds two numbers.\n * @customfunction\n * @param first First number\n * @param second Second number\n * @returns The sum of the two numbers.\n */\nexport function add(first: number, second: number): number {\n  return first + second;\n}\n\n/**\n * Displays the current time once a second.\n * @customfunction\n * @param invocation Custom function handler\n */\nexport function clock(invocation: CustomFunctions.StreamingInvocation<string>): void {\n  const timer = setInterval(() => {\n    const time = currentTime();\n    invocation.setResult(time);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Returns the current time.\n * @returns String with the current time formatted for the current locale.\n */\nexport function currentTime(): string {\n  return new Date().toLocaleTimeString();\n}\n\n/**\n * Increments a value once a second.\n * @customfunction\n * @param incrementBy Amount to increment\n * @param invocation Custom function handler\n */\nexport function increment(\n  incrementBy: number,\n  invocation: CustomFunctions.StreamingInvocation<number>\n): void {\n  let result = 0;\n  const timer = setInterval(() => {\n    result += incrementBy;\n    invocation.setResult(result);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param message String to write.\n * @returns String to write.\n */\nexport function logMessage(message: string): string {\n  console.log(message);\n\n  return message;\n}\n\n\nexport function factorialRow(n: number): number[] {\n  if (n < 0 || !Number.isFinite(n) || !Number.isInteger(n)) {\n    throw new Error(\"Input must be a non-negative integer.\");\n  }\n  const result: number[] = [];\n  let fact = 1;\n  for (let i = 0; i <= n; i++) {\n    if (i > 0) fact *= i;\n    result.push(fact);\n  }\n  return result;\n}\n\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"CLOCK\", clock);\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"LOG\", logMessage);"],"names":["add","first","second","clock","invocation","timer","setInterval","time","currentTime","setResult","onCanceled","clearInterval","Date","toLocaleTimeString","increment","incrementBy","result","logMessage","message","console","log","factorialRow","n","Number","isFinite","isInteger","Error","fact","i","push","CustomFunctions","associate"],"sourceRoot":""}